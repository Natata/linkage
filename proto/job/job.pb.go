// Code generated by protoc-gen-go. DO NOT EDIT.
// source: job.proto

package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Job struct {
	Payload              string            `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_job_2f42ffda08b5bdf2, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (dst *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(dst, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Job) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Passphrase struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Passphrase) Reset()         { *m = Passphrase{} }
func (m *Passphrase) String() string { return proto.CompactTextString(m) }
func (*Passphrase) ProtoMessage()    {}
func (*Passphrase) Descriptor() ([]byte, []int) {
	return fileDescriptor_job_2f42ffda08b5bdf2, []int{1}
}
func (m *Passphrase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Passphrase.Unmarshal(m, b)
}
func (m *Passphrase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Passphrase.Marshal(b, m, deterministic)
}
func (dst *Passphrase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passphrase.Merge(dst, src)
}
func (m *Passphrase) XXX_Size() int {
	return xxx_messageInfo_Passphrase.Size(m)
}
func (m *Passphrase) XXX_DiscardUnknown() {
	xxx_messageInfo_Passphrase.DiscardUnknown(m)
}

var xxx_messageInfo_Passphrase proto.InternalMessageInfo

func (m *Passphrase) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*Job)(nil), "job.Job")
	proto.RegisterMapType((map[string]string)(nil), "job.Job.MetadataEntry")
	proto.RegisterType((*Passphrase)(nil), "job.Passphrase")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Ask(ctx context.Context, in *Passphrase, opts ...grpc.CallOption) (Service_AskClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Ask(ctx context.Context, in *Passphrase, opts ...grpc.CallOption) (Service_AskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/job.Service/Ask", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_AskClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type serviceAskClient struct {
	grpc.ClientStream
}

func (x *serviceAskClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Ask(*Passphrase, Service_AskServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Ask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Passphrase)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Ask(m, &serviceAskServer{stream})
}

type Service_AskServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type serviceAskServer struct {
	grpc.ServerStream
}

func (x *serviceAskServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "job.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ask",
			Handler:       _Service_Ask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor_job_2f42ffda08b5bdf2) }

var fileDescriptor_job_2f42ffda08b5bdf2 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xca, 0x4f, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xca, 0x4f, 0x52, 0x9a, 0xc0, 0xc8, 0xc5, 0xec,
	0x95, 0x9f, 0x24, 0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93, 0x9f, 0x98, 0x22, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a, 0x19, 0x71, 0x71, 0xe4, 0xa6, 0x96, 0x24, 0xa6, 0x24,
	0x96, 0x24, 0x4a, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0x89, 0xe9, 0x81, 0x0c, 0xf1, 0xca, 0x4f,
	0xd2, 0xf3, 0x85, 0x4a, 0xb8, 0xe6, 0x95, 0x14, 0x55, 0x06, 0xc1, 0xd5, 0x49, 0x59, 0x73, 0xf1,
	0xa2, 0x48, 0x09, 0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x42, 0x8d, 0x06, 0x31, 0x85, 0x44, 0xb8,
	0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x15, 0x93, 0x05, 0xa3,
	0x92, 0x02, 0x17, 0x57, 0x40, 0x62, 0x71, 0x71, 0x41, 0x46, 0x51, 0x62, 0x71, 0xaa, 0x90, 0x10,
	0x17, 0x4b, 0x72, 0x7e, 0x4a, 0x2a, 0x54, 0x2b, 0x98, 0x6d, 0xa4, 0xcf, 0xc5, 0x1e, 0x9c, 0x5a,
	0x54, 0x96, 0x99, 0x9c, 0x2a, 0xa4, 0xc2, 0xc5, 0xec, 0x58, 0x9c, 0x2d, 0xc4, 0x0f, 0x76, 0x12,
	0x42, 0x9b, 0x14, 0x07, 0xcc, 0x8d, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x1f, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xac, 0x61, 0xdf, 0xfe, 0x00, 0x00, 0x00,
}
